import numpy as np
import pandas as pd

# Load the dataset
data = pd.read_csv(r"C:\Users\Densingh\Downloads\archive (2)\kidney_disease.csv")

# Drop unnecessary 'id' column if it exists
if 'id' in data.columns:
    data = data.drop('id', axis=1)

# Rename columns for clarity
data.columns = [
    'age', 'blood_pressure', 'specific_gravity', 'albumin', 'sugar',
    'red_blood_cells', 'pus_cell', 'pus_cell_clumps', 'bacteria',
    'blood_glucose_random', 'blood_urea', 'creatinine',
    'sodium', 'potassium', 'hemoglobin', 'cell_volume',
    'white_blood_cell', 'red_blood_cell',
    'hypertension', 'diabetes_mellitus', 'coronary_artery_disease',
    'appetite', 'pedal_edema', 'anemia', 'classification'
]

# Define columns that should be numeric but may be stored as text
text_to_numeric_cols = ['cell_volume', 'white_blood_cell', 'red_blood_cell']

# Function to convert text columns to numeric
def convert_text_to_numeric(df, columns):
    for col in columns:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        print(f"Converted {col} to {df[col].dtype}")

# Convert text columns to numeric
print("Original data types:")
for col in text_to_numeric_cols:
    print(f"{col}: {data[col].dtype}")
convert_text_to_numeric(data, text_to_numeric_cols)

# Function to handle missing values
def handle_missing_values(df):
    # Numeric columns: Fill with mean
    num_cols = df.select_dtypes(include=['float64', 'int64']).columns
    for col in num_cols:
        df[col] = df[col].fillna(df[col].mean())
    
    # Categorical columns: Fill with mode
    cat_cols = df.select_dtypes(include=['object']).columns
    for col in cat_cols:
        df[col] = df[col].fillna(df[col].mode()[0])
    
    return df

# Handle missing values
data = handle_missing_values(data)

# Check for remaining missing values
missing = data.isnull().sum()
if missing.any():
    print("Remaining missing values:\n", missing[missing > 0])
else:
    print("No missing values remain.")

# Clean categorical columns with inconsistent values
def clean_categorical_columns(df):
    # Clean diabetes_mellitus
    df['diabetes_mellitus'] = df['diabetes_mellitus'].replace({
        " yes": "yes",
        "\tno": "no",
        "\tyes": "yes"
    })
    
    # Clean coronary_artery_disease
    df['coronary_artery_disease'] = df['coronary_artery_disease'].replace({
        "\tno": "no"
    })
    
    # Clean classification
    df['classification'] = df['classification'].replace({
        "ckd\t": "ckd",
        "notckd": "not ckd"
    })
    
    return df

# Apply cleaning to categorical columns
data = clean_categorical_columns(data)

# Define mappings for categorical to numerical conversion
categorical_mappings = {
    'appetite': {'good': 1, 'poor': 0},
    'pus_cell': {'normal': 1, 'abnormal': 0},
    'pus_cell_clumps': {'present': 1, 'notpresent': 0},
    'bacteria': {'present': 1, 'notpresent': 0},
    'red_blood_cells': {'normal': 1, 'abnormal': 0},
    'hypertension': {'yes': 1, 'no': 0},
    'diabetes_mellitus': {'yes': 1, 'no': 0},
    'coronary_artery_disease': {'yes': 1, 'no': 0},
    'pedal_edema': {'yes': 1, 'no': 0},  # Added mapping for pedal_edema
    'anemia': {'yes': 1, 'no': 0},      # Added mapping for anemia
    'classification': {'ckd': 1, 'not ckd': 0}
}

# Function to map categorical values to numerical
def map_categorical_to_numeric(df, mappings):
    for col, mapping in mappings.items():
        df[col] = df[col].map(mapping)
        if df[col].isnull().any():
            print(f"Warning: Some values in {col} could not be mapped. Consider checking unique values.")
        print(f"Mapped {col} to numerical values: {df[col].unique()}")
    return df

# Apply categorical to numerical mapping
data = map_categorical_to_numeric(data, categorical_mappings)

# Verify data types and cleaned data
print("\nFinal data types:")
print(data.dtypes)
print("\nFirst few rows of cleaned data:")
print(data.head(20))

# Save cleaned dataset
data.to_csv("cleaned_kidney_disease.csv", index=False)
print("Cleaned dataset saved as 'cleaned_kidney_disease.csv'")
import matplotlib.pyplot as plt  # ✅ Corrected typo: 'mathplotlib' → 'matplotlib'
import seaborn as sns            # ✅ Corrected typo: 'seaborm' → 'seaborn'

plt.figure(figsize=(15, 8))
sns.heatmap(data.corr(), annot=True, linewidths=0.5)
plt.title('Correlation Heatmap', fontsize=16)
plt.xticks(rotation=45)
plt.yticks(rotation=0)
plt.tight_layout()
plt.show()
target_corr = data.corr()['classification'].abs().sort_values(ascending=False)[1:]
target_corr
from sklearn.model_selection import train_test_split
x=data.drop('classification',axis=1)
y=data['classification']
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.25,random_state=25)
print(x_train.shape)
print(x_test.shape)
from sklearn.tree import DecisionTreeClassifier
dct=DecisionTreeClassifier()
dct.fit(x_train,y_train)
y_pred_dct=dct.predict(x_test)
y_pred_dct
from sklearn.naive_bayes import GaussianNB
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.tree import DecisionTreeClassifier  # You forgot to import this

models = []

# Fixing all typos
models.append(('Naive Bayes', GaussianNB()))
models.append(('KNN', KNeighborsClassifier(n_neighbors=8)))  # Fixed typo: n_neighbours → n_neighbors
models.append(('RandomForestClassifier', RandomForestClassifier()))
models.append(('DecisionTreeClassifier', DecisionTreeClassifier()))  # Fixed spelling: Dicision → Decision
models.append(('SVM', SVC(kernel='linear')))  # Fixed spelling: kernal → kernel

from sklearn.metrics import accuracy_score,precision_score,recall_score,f1_score,confusion_matrix
from sklearn.metrics import confusion_matrix, accuracy_score, precision_score, recall_score, f1_score

for name, model in models:
    print(f"Model: {name}")
    model.fit(x_train, y_train)
    y_pred = model.predict(x_test)
    
    print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
    print("Accuracy: ", accuracy_score(y_test, y_pred))
    print("Precision: ", precision_score(y_test, y_pred))
    print("Recall: ", recall_score(y_test, y_pred))
    print("F1 Score: ", f1_score(y_test, y_pred))
    print("-" * 40)
