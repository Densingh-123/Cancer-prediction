# Install kaggle if not already installed
!pip install -q kaggle

import os
import json
import numpy as np
import pandas as pd
from zipfile import ZipFile

from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Embedding, LSTM
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load kaggle API credentials
with open("kaggle.json") as f:
    kaggle_dict = json.load(f)
os.environ['KAGGLE_USERNAME'] = kaggle_dict["username"]
os.environ['KAGGLE_KEY'] = kaggle_dict["key"]

# Download dataset
!kaggle datasets download -d lakshmi25npathi/imdb-dataset-of-50k-movie-reviews

# Extract dataset
with ZipFile('imdb-dataset-of-50k-movie-reviews.zip', 'r') as zip_ref:
    zip_ref.extractall()

# Load data
data = pd.read_csv('IMDB Dataset.csv')

# Encode sentiments
data.replace({"sentiment": {"positive": 1, "negative": 0}}, inplace=True)

# Split dataset
train_data, test_data = train_test_split(data, test_size=0.2, random_state=42)

# Tokenization
tokenizer = Tokenizer(num_words=5000)
tokenizer.fit_on_texts(train_data['review'])

x_train = pad_sequences(tokenizer.texts_to_sequences(train_data['review']), maxlen=200)
x_test = pad_sequences(tokenizer.texts_to_sequences(test_data['review']), maxlen=200)

y_train = train_data['sentiment'].values
y_test = test_data['sentiment'].values

# Build the model
model = Sequential()
model.add(Embedding(input_dim=5000, output_dim=128, input_length=200))
model.add(LSTM(128, dropout=0.2, recurrent_dropout=0.2))
model.add(Dense(1, activation='sigmoid'))

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.summary()

# Train the model
model.fit(x_train, y_train, epochs=5, batch_size=128, validation_split=0.3)

# Evaluate the model
loss, accuracy = model.evaluate(x_test, y_test)
print("Loss:", loss)
print("Accuracy:", accuracy)

# Prediction function
def predict_sentiment(review):
    sequence = tokenizer.texts_to_sequences([review])
    padded = pad_sequences(sequence, maxlen=200)
    prediction = model.predict(padded, verbose=0)
    sentiment = "positive" if prediction[0][0] > 0.5 else "negative"
    return sentiment

# Example prediction
review = "This movie is fantastic. It contains adventure, thriller, comedy, and is the best family movie!"
sentiment = predict_sentiment(review)
print("Sentiment:", sentiment)
